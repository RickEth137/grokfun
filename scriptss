import * as fs from "fs";
import * as anchor from "@coral-xyz/anchor";
import { PublicKey, SystemProgram } from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  ASSOCIATED_TOKEN_PROGRAM_ID,
  getOrCreateAssociatedTokenAccount,
  createMint,
  mintTo,
} from "@solana/spl-token";

async function main() {
  const programId = new PublicKey("SiWK8bFxB4zU9BTzH9C9PQ364sedNxXLTCQ84o5WvKm");

  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  const connection = provider.connection;
  const wallet = provider.wallet as anchor.Wallet;

  // Load your program’s IDL generated by anchor build
  const idl = JSON.parse(fs.readFileSync("./target/idl/grokpad.json", "utf8"));
  const program = new anchor.Program(idl as any, programId, provider);

  // 1) Create a new token mint (9 decimals)
  const mint = await createMint(connection, (wallet as any).payer, wallet.publicKey, null, 9);
  console.log("Mint:", mint.toBase58());

  // 2) Derive the PDA used by your program: seeds ["launch", mint]
  const [pda] = PublicKey.findProgramAddressSync(
    [Buffer.from("launch"), mint.toBuffer()],
    programId
  );
  console.log("PDA:", pda.toBase58());

  // 3) Create the PDA’s vault ATA and mint 1 token to it
  const vaultAta = await getOrCreateAssociatedTokenAccount(
    connection,
    (wallet as any).payer,
    mint,
    pda,
    true // owner is PDA (off-curve)
  );
  console.log("Vault ATA:", vaultAta.address.toBase58());

  await mintTo(
    connection,
    (wallet as any).payer,
    mint,
    vaultAta.address,
    (wallet as any).payer,
    1_000_000_000n // 1 token at 9 decimals
  );

  // 4) Ensure your wallet has an ATA for this mint
  const buyerAta = await getOrCreateAssociatedTokenAccount(
    connection,
    (wallet as any).payer,
    mint,
    wallet.publicKey
  );
  console.log("Buyer ATA:", buyerAta.address.toBase58());

  // Balances before
  const beforeVault = await connection.getTokenAccountBalance(vaultAta.address);
  const beforeBuyer = await connection.getTokenAccountBalance(buyerAta.address);
  console.log("Before -> vault:", beforeVault.value.uiAmountString, "buyer:", beforeBuyer.value.uiAmountString);

  // 5) Call buy to move 1 token from vault -> buyer
  const sig = await program.methods
    .buy(new anchor.BN(1_000_000_000))
    .accounts({
      buyer: wallet.publicKey,
      mint,
      pda,
      vaultAta: vaultAta.address,
      buyerAta: buyerAta.address,
      tokenProgram: TOKEN_PROGRAM_ID,
      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
      systemProgram: SystemProgram.programId,
    })
    .rpc();

  console.log("Buy tx:", sig);

  // Balances after
  const afterVault = await connection.getTokenAccountBalance(vaultAta.address);
  const afterBuyer = await connection.getTokenAccountBalance(buyerAta.address);
  console.log("After  -> vault:", afterVault.value.uiAmountString, "buyer:", afterBuyer.value.uiAmountString);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
